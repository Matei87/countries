{"version":3,"sources":["components/Header/Header.js","components/Filters/Filters.js","components/CountryDetails/CountryDetails.js","components/Card/Card.js","components/Cards/Cards.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Filters","this","props","changeUrl","valueInputOnChange","type","placeholder","onChange","htmlFor","id","value","defaultValue","React","Component","CountryDetails","state","details","country","fetch","then","res","json","data","setState","catch","err","console","log","obiect","currencies","currency","key","push","language","languages","timezones","timezone","to","src","flag","alt","name","style","color","nativeName","Number","population","toLocaleString","region","subregion","capital","Array","borders","join","topLevelDomain","Card","Cards","countries","map","Fragment","Footer","Date","getFullYear","App","valueInput","defaultUrl","isLoading","error","e","target","filteredCountries","filter","toLowerCase","includes","exact","path","defaultvalue","role","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f3263b4d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"container-fluid\">\r\n                <h2>Where in the world?</h2>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Filters.css';\r\n\r\n\r\nclass Filters extends React.Component {\r\n    render() {\r\n        const { changeUrl, valueInputOnChange } = this.props;\r\n\r\n        return (\r\n            <div className=\"filters\">\r\n                <input\r\n                    type=\"search\"\r\n                    placeholder=\"Search a country\"\r\n                    onChange={valueInputOnChange}\r\n                />\r\n\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"valuelabel\"></label>\r\n                    <select\r\n                        id=\"valuelabel\"\r\n                        onChange={changeUrl}\r\n                        className=\"custom-select custom-select-lg\"\r\n                    >\r\n\r\n                        <option value=\"https://restcountries.eu/rest/v2/?fields=name;capital;population;region;flag\" defaultValue>All Countries</option>\r\n                        <option value=\"https://restcountries.eu/rest/v2/region/africa?fields=name;capital;population;region;flag\">Africa</option>\r\n                        <option value=\"https://restcountries.eu/rest/v2/region/americas?fields=name;capital;population;region;flag\">America</option>\r\n                        <option value=\"https://restcountries.eu/rest/v2/region/asia?fields=name;capital;population;region;flag\">Asia</option>\r\n                        <option value=\"https://restcountries.eu/rest/v2/region/europe?fields=name;capital;population;region;flag\">Europe</option>\r\n                        <option value=\"https://restcountries.eu/rest/v2/region/oceania?fields=name;capital;population;region;flag\">Oceania</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Filters;","import React from 'react';\r\nimport './CountryDetails.css';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass CountryDetails extends React.Component {\r\n    state = {\r\n        details: []\r\n    }\r\n    componentDidMount() {\r\n        const { country } = this.props;\r\n        fetch(country)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                this.setState({ details: data[0] })\r\n            })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n    render() {\r\n        const { details } = this.state;\r\n\r\n        const obiect = details.currencies;\r\n        let currency = [];\r\n        for (let key in obiect) {\r\n            currency.push(obiect[key]['name']);\r\n        }\r\n\r\n        const language = details.languages;\r\n        const languages = [];\r\n        for (let key in language) {\r\n            languages.push(language[key]['name']);\r\n        }\r\n        const timezones = details.timezones;\r\n        let timezone = [];\r\n        for (let key in timezones) {\r\n            timezone.push(timezones[key]);\r\n        }\r\n\r\n        return (\r\n            <div className=\"container-fluid\" id=\"countryDetails\">\r\n                <Link\r\n                    to=\"/\"\r\n                    className=\"btn btn-outline-primary page-back\">\r\n                    <i className=\"fas fa-arrow-left\" /> Back\r\n                    </Link>\r\n\r\n                <div className=\"row \">\r\n\r\n                    <div className=\"col-md-6 first-col\">\r\n                        <img src={details.flag} alt={details.name} />\r\n                    </div>\r\n\r\n                    <div className=\"col-md-6 second-col\">\r\n                        <h1 style={{ color: 'white' }}>{details.name}</h1>\r\n                        <div className=\"col-md-6\">\r\n                            <ul >\r\n                                <li><span>Native Name:</span> {details.nativeName}</li>\r\n                                <li><span>Population:</span> {Number(details.population).toLocaleString()}</li>\r\n                                <li><span>Region:</span> {details.region}</li>\r\n                                <li><span>Sub Region:</span> {details.subregion}</li>\r\n                                <li><span>Capital:</span> {details.capital}</li>\r\n                                <li><span>Border:</span> {Array(details.borders).join(', ')}</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <ul>\r\n                                <li><span>Net Domain:</span> {details.topLevelDomain}</li>\r\n                                <li><span>Currency:</span>  {currency.join(', ')}</li>\r\n                                <li><span>Languages:</span> {languages.join(', ')}</li>\r\n                                <li><span>Time Zone:</span> {timezone[0]}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from 'react'\r\nimport './Card.css';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Card extends React.Component {\r\n\r\n    render() {\r\n        const { country } = this.props;\r\n\r\n        if (country.region === '' || country.region === 0) {\r\n            country.region = 'N/A';\r\n        }\r\n        if (country.capital === '' || country.capital === 0) {\r\n            country.capital = 'N/A';\r\n        }\r\n        if (country.population === '' || country.population === 0) {\r\n            country.population = 'N/A';\r\n        }\r\n\r\n        return (\r\n            < div className=\"card\">\r\n                <img className=\"card-img-top\" src={country.flag} alt={country.name} />\r\n                <div className=\"card-body\">\r\n                    <h3 className=\"card-title\">{country.name}</h3>\r\n                    <ul>\r\n                        <li><span>Population</span>: {country.population.toLocaleString()}</li>\r\n                        <li><span>Region</span>: {country.region}</li>\r\n                        <li><span>Capital</span>: {country.capital}</li>\r\n                    </ul>\r\n                    <Link to={`/${country.name}`}>\r\n                        <button className=\"btn btn-outline-primary page-details\">Details</button>\r\n                    </Link >\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react'\r\nimport Card from '../Card/Card';\r\n\r\n\r\nclass Cards extends React.Component {\r\n    render() {\r\n        const { countries } = this.props;\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    countries.map(country => {\r\n                        return <React.Fragment key={country.name}>\r\n                            <Card country={country} />\r\n                        </React.Fragment>\r\n                    }\r\n\r\n                    )\r\n                }\r\n            </>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cards;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return <footer>Made by&nbsp;<p>Matei Mircea</p>&nbsp; @ {new Date().getFullYear()}</footer>\r\n}\r\nexport default Footer;\r\n","import React from 'react';\nimport Header from './components/Header/Header';\nimport Filters from './components/Filters/Filters';\nimport CountryDetails from './components/CountryDetails/CountryDetails';\nimport Cards from './components/Cards/Cards';\nimport Footer from './components/Footer/Footer';\n\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n\nclass App extends React.Component {\n  state = {\n    countries: [],\n    valueInput: '',\n    defaultUrl: 'https://restcountries.eu/rest/v2/?fields=name;capital;population;region;flag',\n    isLoading: false,\n    error: false\n  }\n\n  componentDidMount() {\n    const { defaultUrl } = this.state;\n    fetch(defaultUrl)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ countries: data, isLoading: true })\n      })\n      .catch(err => this.setState({ error: true }));\n\n  }\n\n  componentDidUpdate() {\n    const { defaultUrl } = this.state;\n    fetch(defaultUrl)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({ countries: data, isLoading: true })\n      })\n      .catch(err => this.setState({ error: true }));\n  }\n\n  changeUrl = e => {\n    this.setState({ defaultUrl: e.target.value })\n  }\n\n  valueInputOnChange = e => {\n    this.setState({ valueInput: e.target.value })\n  }\n\n\n  render() {\n    const { countries, valueInput, isLoading } = this.state;\n\n    let filteredCountries = countries.filter(country => {\n      return country.name.toLowerCase().includes(valueInput.toLowerCase());\n    })\n\n    return (\n      <Router>\n        <Switch>\n          <>\n            <Header />\n            <div className=\"container-fluid\">\n\n              <Route exact path=\"/\" >\n                <Filters\n                  changeUrl={this.changeUrl}\n                  defaultvalue={this.state.defaultvalue}\n                  countries={this.state.countries}\n                  valueInputOnChange={this.valueInputOnChange}\n                />\n\n                <div className=\"row\">\n                  <div className=\"cards\">\n                    {isLoading === false ? <>\n                      <div className=\"spinner-border text-light\" role=\"status\">\n                        <span className=\"sr-only\">Loading...</span>\n                      </div>\n                    </> : filteredCountries.length === 0 ? <>\n                      <h2 className=\"h2-center\">Not Found</h2>\n                    </> : <>  <Cards countries={filteredCountries} /> </>}\n                  </div>\n                </div>\n              </Route>\n            </div>\n\n            {countries.map(country => {\n              return <Route exact path={`/${country.name}`} key={country.name}>\n                <CountryDetails country={`https://restcountries.eu/rest/v2/name/${country.name}`} />\n              </Route>\n\n            })}\n\n            <Footer />\n          </>\n        </Switch>\n      </Router >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}